"""Класс "Последовательность" будет являться базовым классом для классов
"ДНК", "РНК" и "Белок".В нем будут реализованы общие
свойства и методы для всех последовательностей."""

class Последовательность:
    def __init__(self, последовательность):
        self.последовательность = последовательность

    def алфавит(self):
        pass

    def название(self):
        pass

    def длина(self):
        return len(self.последовательность)

    def статистика(self):
        статистика = {}
        for символ in self.последовательность:
            if символ in статистика:
                статистика[символ] += 1
            else:
                статистика[символ] = 1
        return статистика

    def молекулярная_масса(self):
        pass

"""Класс "ДНК"  наследуется от класса "Последовательность"
и реализует свои уникальные методы: возврат комплементарной
последовательности и транскрипция ДНК в РНК"""

class ДНК(Последовательность):
    def алфавит(self):
        return "ATCG"

    def название(self):
        return "ДНК"

    def комплементарная_последовательность(self):
        комплементарная_последовательность = ""
        for символ in self.последовательность:
            if символ == "A":
                комплементарная_последовательность += "T"
            elif символ == "T":
                комплементарная_последовательность += "A"
            elif символ == "C":
                комплементарная_последовательность += "G"
            elif символ == "G":
                комплементарная_последовательность += "C"
        return комплементарная_последовательность

    def транскрипция(self):
        РНК_последовательность = ""
        for символ in self.последовательность:
            if символ == "A":
                РНК_последовательность += "U"
            elif символ == "T":
                РНК_последовательность += "A"
            elif символ == "C":
                РНК_последовательность += "G"
            elif символ == "G":
                РНК_последовательность += "C"
        return РНК_последовательность


"""Класс "РНК" также наследуется от класса "Последовательность"
и реализует свои уникальные методы: возврат комплементарной
последовательности и трансляция РНК в белок."""

class РНК(Последовательность):
    def алфавит(self):
        return "AUGC"

    def название(self):
        return "РНК"

    def комплементарная_последовательность(self):
        комплементарная_последовательность = ""
        for символ in self.последовательность:
            if символ == "A":
                комплементарная_последовательность += "U"
            elif символ == "U":
                комплементарная_последовательность += "A"
            elif символ == "G":
                комплементарная_последовательность += "C"
            elif символ == "C":
                комплементарная_последовательность += "G"
        return комплементарная_последовательность

    def трансляция(self):
        таблица_трансляции = {
            "UUU": "Фенилаланин",
            "UUC": "Фенилаланин",
            "UUA": "Лейцин",
            "UUG": "Лейцин",
            "UCU": "Серин",
            "UCC": "Серин",
            "UCA": "Серин",
            "UCG": "Серин",
            "UAU": "Тирозин",
            "UAC": "Тирозин",
            "UAA": "Стоп",
            "UAG": "Стоп",
            "UGU": "Цистеин",
            "UGC": "Цистеин",
            "UGA": "Стоп",
            "UGG": "Триптофан",
            "CUU": "Лейцин",
            "CUC": "Лейцин",
            "CUA": "Лейцин",
            "CUG": "Лейцин",
            "CCU": "Пролин",
            "CCC": "Пролин",
            "CCA": "Пролин",
            "CCG": "Пролин",
            "CAU": "Гистидин",
            "CAC": "Гистидин",
            "CAA": "Глутамин",
            "CAG": "Глутамин",
            "CGU": "Аргинин",
            "CGC": "Аргинин",
            "CGA": "Аргинин",
            "CGG": "Аргинин",
            "AUU": "Изолейцин",
            "AUC": "Изолейцин",
            "AUA": "Изолейцин",
            "AUG": "Метионин",
            "ACU": "Треонин",
            "ACC": "Треонин",
            "ACA": "Треонин",
            "ACG": "Треонин",
            "AAU": "Аспарагин",
            "AAC": "Аспарагин",
            "AAA": "Лизин",
            "AAG": "Лизин",
            "AGU": "Серин",
            "AGC": "Серин",
            "AGA": "Аргинин",
            "AGG": "Аргинин",
            "GUU": "Валин",
            "GUC": "Валин",
            "GUA": "Валин",
            "GUG": "Валин",
            "GCU": "Аланин",
            "GCC": "Аланин",
            "GCA": "Аланин",
            "GCG": "Аланин",
            "GAU": "Аспарагиновая кислота",
            "GAC": "Аспарагиновая кислота",
            "GAA": "Глутаминовая кислота",
            "GAG": "Глутаминовая кислота",
            "GGU": "Глицин",
            "GGC": "Глицин",
            "GGA": "Глицин",
            "GGG": "Глицин"
        }

        белок = ""
        for i in range(0, len(self.последовательность), 3):
            кодон = self.последовательность[i:i + 3]
            if кодон in таблица_трансляции:
                аминокислота = таблица_трансляции[кодон]
                if аминокислота != "Стоп":
                    белок += аминокислота + " "
                else:
                    break
        return белок.strip()


#создаю объекты и использую их методы:

днк_последовательность = ДНК("ATCGTACGACGTACG")
print(днк_последовательность.алфавит())  # ATCG
print(днк_последовательность.название())  # ДНК
print(днк_последовательность.последовательность)  # ATCGTACGACGTACG
print(днк_последовательность.длина())  # 15
print(днк_последовательность.статистика())  # {'A': 4, 'T': 4, 'C': 4, 'G': 3}
print(днк_последовательность.молекулярная_масса())  # реализация зависит от требуемой формулы

рнк_последовательность = РНК("AUCGAUCGAUCGAUCG")
print(рнк_последовательность.алфавит())  # AUGC
print(рнк_последовательность.название())  # РНК
print(рнк_последовательность.последовательность)  # AUCGAUCGAUCGAUCG
print(рнк_последовательность.длина())  # 16
print(рнк_последовательность.статистика())  # {'A': 4, 'U': 4, 'C': 4, 'G': 4}
print(рнк_последовательность.молекулярная_масса())  # реализация зависит от требуемой формулы

print(днк_последовательность.комплементарная_последовательность())  # TAGCATGCTGCAATGC
print(днк_последовательность.транскрипция())  # UAGCAUGCUUGCAUGC
print(рнк_последовательность.комплементарная_последовательность())  # UAGCUAGCUAGCUAGC
print(рнк_последовательность.трансляция())  # Изолейцин Серин Изолейцин Серин